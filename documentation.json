{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICoreFormSection",
            "id": "interface-ICoreFormSection-1460097b3c70976da1b28060af17f43c3c7d2720c8e119d746a4d99458469a693b2bacf1dfb48307cea5efcfea1f5284bd7992584eecf86cdcca318d13e30c30",
            "file": "src/app/enum/enum-interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport enum EnumFormBaseControlType {\r\n  TEXTBOX = \"TEXTBOX\",\r\n  TEXTAREA = \"TEXTAREA\",\r\n  DROPDOWN = \"DROPDOWN\",\r\n  DATEPICKER = \"DATEPICKER\",\r\n  CHECKBOX = \"CHECKBOX\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  RADIOGROUP = \"RADIOGROUP\",\r\n  MONTH_SELECTOR = \"MONTH_SELECTOR\",\r\n  CURRENCY = \"CURRENCY\"\r\n}\r\n\r\nexport interface IFormBaseDropdownOption {\r\n  key: string,\r\n  value: string,\r\n}\r\nexport enum IFnNameValidator {\r\n  required = 'required',\r\n  email = 'email',\r\n  minLength = 'minLength',\r\n  maxLength = 'maxLength',\r\n  pattern = 'pattern',\r\n  min = 'min',\r\n  max = 'max',\r\n  nullValidator = 'nullValidator',\r\n  unique = 'unique',\r\n}\r\nexport interface IValidator {\r\n  name: IFnNameValidator | string,\r\n  validator: ValidatorFn,\r\n  errorMessage: string,\r\n}\r\nexport interface IError {\r\n  key: string,\r\n  errorMessage: string\r\n}\r\n\r\n\r\nexport interface ICoreFormSection {\r\n  caption?: string;\r\n  rows: IFormBaseControl[][];\r\n}\r\n\r\nexport interface IFormBaseControl {\r\n  flexSize: number;\r\n  controlType: EnumFormBaseControlType,\r\n  field: string,\r\n  label: string,\r\n  value: any,\r\n  options?: IFormBaseDropdownOption[],\r\n  readonly?: boolean,\r\n  hidden?: boolean,\r\n  disabled?: boolean,\r\n  type?: string,\r\n\r\n  textareaRows?: number,\r\n\r\n  validators?: IValidator[],\r\n\r\n  focus$?: BehaviorSubject<any>;\r\n  blur$?: BehaviorSubject<any>;\r\n\r\n}",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormBaseControl[][]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IError",
            "id": "interface-IError-1460097b3c70976da1b28060af17f43c3c7d2720c8e119d746a4d99458469a693b2bacf1dfb48307cea5efcfea1f5284bd7992584eecf86cdcca318d13e30c30",
            "file": "src/app/enum/enum-interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport enum EnumFormBaseControlType {\r\n  TEXTBOX = \"TEXTBOX\",\r\n  TEXTAREA = \"TEXTAREA\",\r\n  DROPDOWN = \"DROPDOWN\",\r\n  DATEPICKER = \"DATEPICKER\",\r\n  CHECKBOX = \"CHECKBOX\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  RADIOGROUP = \"RADIOGROUP\",\r\n  MONTH_SELECTOR = \"MONTH_SELECTOR\",\r\n  CURRENCY = \"CURRENCY\"\r\n}\r\n\r\nexport interface IFormBaseDropdownOption {\r\n  key: string,\r\n  value: string,\r\n}\r\nexport enum IFnNameValidator {\r\n  required = 'required',\r\n  email = 'email',\r\n  minLength = 'minLength',\r\n  maxLength = 'maxLength',\r\n  pattern = 'pattern',\r\n  min = 'min',\r\n  max = 'max',\r\n  nullValidator = 'nullValidator',\r\n  unique = 'unique',\r\n}\r\nexport interface IValidator {\r\n  name: IFnNameValidator | string,\r\n  validator: ValidatorFn,\r\n  errorMessage: string,\r\n}\r\nexport interface IError {\r\n  key: string,\r\n  errorMessage: string\r\n}\r\n\r\n\r\nexport interface ICoreFormSection {\r\n  caption?: string;\r\n  rows: IFormBaseControl[][];\r\n}\r\n\r\nexport interface IFormBaseControl {\r\n  flexSize: number;\r\n  controlType: EnumFormBaseControlType,\r\n  field: string,\r\n  label: string,\r\n  value: any,\r\n  options?: IFormBaseDropdownOption[],\r\n  readonly?: boolean,\r\n  hidden?: boolean,\r\n  disabled?: boolean,\r\n  type?: string,\r\n\r\n  textareaRows?: number,\r\n\r\n  validators?: IValidator[],\r\n\r\n  focus$?: BehaviorSubject<any>;\r\n  blur$?: BehaviorSubject<any>;\r\n\r\n}",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFormBaseControl",
            "id": "interface-IFormBaseControl-1460097b3c70976da1b28060af17f43c3c7d2720c8e119d746a4d99458469a693b2bacf1dfb48307cea5efcfea1f5284bd7992584eecf86cdcca318d13e30c30",
            "file": "src/app/enum/enum-interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport enum EnumFormBaseControlType {\r\n  TEXTBOX = \"TEXTBOX\",\r\n  TEXTAREA = \"TEXTAREA\",\r\n  DROPDOWN = \"DROPDOWN\",\r\n  DATEPICKER = \"DATEPICKER\",\r\n  CHECKBOX = \"CHECKBOX\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  RADIOGROUP = \"RADIOGROUP\",\r\n  MONTH_SELECTOR = \"MONTH_SELECTOR\",\r\n  CURRENCY = \"CURRENCY\"\r\n}\r\n\r\nexport interface IFormBaseDropdownOption {\r\n  key: string,\r\n  value: string,\r\n}\r\nexport enum IFnNameValidator {\r\n  required = 'required',\r\n  email = 'email',\r\n  minLength = 'minLength',\r\n  maxLength = 'maxLength',\r\n  pattern = 'pattern',\r\n  min = 'min',\r\n  max = 'max',\r\n  nullValidator = 'nullValidator',\r\n  unique = 'unique',\r\n}\r\nexport interface IValidator {\r\n  name: IFnNameValidator | string,\r\n  validator: ValidatorFn,\r\n  errorMessage: string,\r\n}\r\nexport interface IError {\r\n  key: string,\r\n  errorMessage: string\r\n}\r\n\r\n\r\nexport interface ICoreFormSection {\r\n  caption?: string;\r\n  rows: IFormBaseControl[][];\r\n}\r\n\r\nexport interface IFormBaseControl {\r\n  flexSize: number;\r\n  controlType: EnumFormBaseControlType,\r\n  field: string,\r\n  label: string,\r\n  value: any,\r\n  options?: IFormBaseDropdownOption[],\r\n  readonly?: boolean,\r\n  hidden?: boolean,\r\n  disabled?: boolean,\r\n  type?: string,\r\n\r\n  textareaRows?: number,\r\n\r\n  validators?: IValidator[],\r\n\r\n  focus$?: BehaviorSubject<any>;\r\n  blur$?: BehaviorSubject<any>;\r\n\r\n}",
            "properties": [
                {
                    "name": "blur$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnumFormBaseControlType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "flexSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "focus$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFormBaseDropdownOption[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "readonly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "textareaRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "validators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IValidator[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFormBaseDropdownOption",
            "id": "interface-IFormBaseDropdownOption-1460097b3c70976da1b28060af17f43c3c7d2720c8e119d746a4d99458469a693b2bacf1dfb48307cea5efcfea1f5284bd7992584eecf86cdcca318d13e30c30",
            "file": "src/app/enum/enum-interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport enum EnumFormBaseControlType {\r\n  TEXTBOX = \"TEXTBOX\",\r\n  TEXTAREA = \"TEXTAREA\",\r\n  DROPDOWN = \"DROPDOWN\",\r\n  DATEPICKER = \"DATEPICKER\",\r\n  CHECKBOX = \"CHECKBOX\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  RADIOGROUP = \"RADIOGROUP\",\r\n  MONTH_SELECTOR = \"MONTH_SELECTOR\",\r\n  CURRENCY = \"CURRENCY\"\r\n}\r\n\r\nexport interface IFormBaseDropdownOption {\r\n  key: string,\r\n  value: string,\r\n}\r\nexport enum IFnNameValidator {\r\n  required = 'required',\r\n  email = 'email',\r\n  minLength = 'minLength',\r\n  maxLength = 'maxLength',\r\n  pattern = 'pattern',\r\n  min = 'min',\r\n  max = 'max',\r\n  nullValidator = 'nullValidator',\r\n  unique = 'unique',\r\n}\r\nexport interface IValidator {\r\n  name: IFnNameValidator | string,\r\n  validator: ValidatorFn,\r\n  errorMessage: string,\r\n}\r\nexport interface IError {\r\n  key: string,\r\n  errorMessage: string\r\n}\r\n\r\n\r\nexport interface ICoreFormSection {\r\n  caption?: string;\r\n  rows: IFormBaseControl[][];\r\n}\r\n\r\nexport interface IFormBaseControl {\r\n  flexSize: number;\r\n  controlType: EnumFormBaseControlType,\r\n  field: string,\r\n  label: string,\r\n  value: any,\r\n  options?: IFormBaseDropdownOption[],\r\n  readonly?: boolean,\r\n  hidden?: boolean,\r\n  disabled?: boolean,\r\n  type?: string,\r\n\r\n  textareaRows?: number,\r\n\r\n  validators?: IValidator[],\r\n\r\n  focus$?: BehaviorSubject<any>;\r\n  blur$?: BehaviorSubject<any>;\r\n\r\n}",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IValidator",
            "id": "interface-IValidator-1460097b3c70976da1b28060af17f43c3c7d2720c8e119d746a4d99458469a693b2bacf1dfb48307cea5efcfea1f5284bd7992584eecf86cdcca318d13e30c30",
            "file": "src/app/enum/enum-interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ValidatorFn } from \"@angular/forms\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\n\r\nexport enum EnumFormBaseControlType {\r\n  TEXTBOX = \"TEXTBOX\",\r\n  TEXTAREA = \"TEXTAREA\",\r\n  DROPDOWN = \"DROPDOWN\",\r\n  DATEPICKER = \"DATEPICKER\",\r\n  CHECKBOX = \"CHECKBOX\",\r\n  ATTACHMENT = \"ATTACHMENT\",\r\n  RADIOGROUP = \"RADIOGROUP\",\r\n  MONTH_SELECTOR = \"MONTH_SELECTOR\",\r\n  CURRENCY = \"CURRENCY\"\r\n}\r\n\r\nexport interface IFormBaseDropdownOption {\r\n  key: string,\r\n  value: string,\r\n}\r\nexport enum IFnNameValidator {\r\n  required = 'required',\r\n  email = 'email',\r\n  minLength = 'minLength',\r\n  maxLength = 'maxLength',\r\n  pattern = 'pattern',\r\n  min = 'min',\r\n  max = 'max',\r\n  nullValidator = 'nullValidator',\r\n  unique = 'unique',\r\n}\r\nexport interface IValidator {\r\n  name: IFnNameValidator | string,\r\n  validator: ValidatorFn,\r\n  errorMessage: string,\r\n}\r\nexport interface IError {\r\n  key: string,\r\n  errorMessage: string\r\n}\r\n\r\n\r\nexport interface ICoreFormSection {\r\n  caption?: string;\r\n  rows: IFormBaseControl[][];\r\n}\r\n\r\nexport interface IFormBaseControl {\r\n  flexSize: number;\r\n  controlType: EnumFormBaseControlType,\r\n  field: string,\r\n  label: string,\r\n  value: any,\r\n  options?: IFormBaseDropdownOption[],\r\n  readonly?: boolean,\r\n  hidden?: boolean,\r\n  disabled?: boolean,\r\n  type?: string,\r\n\r\n  textareaRows?: number,\r\n\r\n  validators?: IValidator[],\r\n\r\n  focus$?: BehaviorSubject<any>;\r\n  blur$?: BehaviorSubject<any>;\r\n\r\n}",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFnNameValidator | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Task",
            "id": "interface-Task-24d887f867e8887b0f8fad9f52ad4771fb2a4912001cc5a8193bbe63a2798927a0ce3392ebc2d1e6b25fe5816e1a421906ea0093b3d963dbe5c175e106360244",
            "file": "src/app/demo/task-box/task-box.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nexport interface Task {\r\n    id?: string;\r\n    title?: string;\r\n    state?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'task-box',\r\n    standalone: true,\r\n    templateUrl: './task-box.component.html',\r\n    styleUrl: './task-box.component.scss',\r\n})\r\n\r\nexport class TaskBoxComponent {\r\n    /**\r\n   * The shape of the task object\r\n  */\r\n    @Input() task?: Task;\r\n\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output()\r\n    onPinTask = new EventEmitter<Event>();\r\n\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output()\r\n    onArchiveTask = new EventEmitter<Event>();\r\n\r\n    /**\r\n     * @ignore\r\n     * Component method to trigger the onPin event\r\n     * @param id string\r\n     */\r\n    onPin(id: any) {\r\n        this.onPinTask.emit(id);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * Component method to trigger the onArchive event\r\n     * @param id string\r\n     */\r\n    onArchive(id: any) {\r\n        this.onArchiveTask.emit(id);\r\n    }\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "CoreControlService",
            "id": "injectable-CoreControlService-2368353d779361831b46fb9e6d9d59cc7b0621656bb9ec1f5fdfc1f5e05f520e24f44111d3b2faf06436fb9e205eff1eaecf08582f3b26c2c4bb1bf2ce0786d7",
            "file": "src/app/libraries/core-control/core-control.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "toFormGroup",
                    "args": [
                        {
                            "name": "sections",
                            "type": "ICoreFormSection[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sections",
                            "type": "ICoreFormSection[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFormGroup",
                    "args": [
                        {
                            "name": "existingForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newControls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "existingForm",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newControls",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { ICoreFormSection } from '../../enum/enum-interfaces';\r\n\r\n@Injectable()\r\nexport class CoreControlService {\r\n  toFormGroup(sections: ICoreFormSection[]): any {\r\n    if(typeof sections === 'string') sections = JSON.parse(sections);\r\n    const group: any = {};\r\n    if (!sections) return group;\r\n    sections.forEach((section) => {\r\n      const fields = section.rows;\r\n      fields.forEach((row) => {\r\n        row.forEach((column) => {\r\n          if (!!column.validators) {\r\n            const validatorArr: ValidatorFn[] = [];\r\n            column.validators.map((x) => {\r\n              validatorArr.push(x.validator);\r\n            });\r\n            group[column.field] = new FormControl(\r\n              { value: column.value, disabled: !!column.disabled },\r\n              validatorArr\r\n            );\r\n          } else {\r\n            group[column.field] = new FormControl({\r\n              value: column.value,\r\n              disabled: !!column.disabled,\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return group;\r\n  }\r\n\r\n  updateFormGroup(existingForm: FormGroup, newControls: { [key: string]: FormControl }) {\r\n    Object.keys(newControls).forEach(key => {\r\n      if (existingForm.controls[key]) {\r\n        const oldControl = existingForm.get(key);\r\n        const newControl = newControls[key];\r\n\r\n        if (oldControl) {\r\n          let hasChanges = false;\r\n\r\n          // Cập nhật validators nếu thay đổi\r\n          const oldValidators = oldControl.validator ? oldControl.validator({} as AbstractControl) : null;\r\n          const newValidators = newControl.validator ? newControl.validator({} as AbstractControl) : null;\r\n          if (JSON.stringify(oldValidators) !== JSON.stringify(newValidators)) {\r\n            oldControl.setValidators(newControl.validator);\r\n            hasChanges = true;\r\n          }\r\n\r\n          // Cập nhật async validators nếu thay đổi\r\n          const oldAsyncValidators = oldControl.asyncValidator ? oldControl.asyncValidator({} as AbstractControl) : null;\r\n          const newAsyncValidators = newControl.asyncValidator ? newControl.asyncValidator({} as AbstractControl) : null;\r\n          if (JSON.stringify(oldAsyncValidators) !== JSON.stringify(newAsyncValidators)) {\r\n            oldControl.setAsyncValidators(newControl.asyncValidator);\r\n            hasChanges = true;\r\n          }\r\n\r\n          // Cập nhật giá trị nếu thay đổi\r\n          if (oldControl.value !== newControl.value) {\r\n            oldControl.setValue(newControl.value, { emitEvent: false });\r\n            hasChanges = true;\r\n          }\r\n\r\n          // Cập nhật trạng thái enabled/disabled\r\n          if (newControl.disabled && !oldControl.disabled) {\r\n            oldControl.disable({ emitEvent: false });\r\n            hasChanges = true;\r\n          } else if (!newControl.disabled && oldControl.disabled) {\r\n            oldControl.enable({ emitEvent: false });\r\n            hasChanges = true;\r\n          }\r\n\r\n          if (hasChanges) {\r\n            oldControl.updateValueAndValidity({ emitEvent: false });\r\n          }\r\n        }\r\n      } else {\r\n        existingForm.addControl(key, newControls[key]);\r\n      }\r\n    });\r\n\r\n    existingForm.updateValueAndValidity({ emitEvent: false });\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "CustomValidators",
            "id": "class-CustomValidators-d780d6bdf75374738e091fb5f9af80729344078004b3496369a1738a0ff90c46264a2bf54b08f7659ef73c94e45f99517821caf7f133009dd5163469713759cc",
            "file": "src/app/libraries/core-form/custom-validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n\r\n    static core(errorKey: string, valid: boolean, errorMessage: string): ValidatorFn {\r\n        return (control: AbstractControl): { [key: string]: any } | null => {\r\n            if (valid) return null;\r\n            const result: any = {};\r\n            result[errorKey] = [control.value, errorMessage];\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "core",
                    "args": [
                        {
                            "name": "errorKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "valid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "valid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-08f41eca145e44b405095b49f2d483f499bde1a944c3de9581d0eb1abb8e49bf1d3c2dd02df2f2d6e54bbb184c2cab2ed4e5875df880d862440fe84fef0ca024",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AppLayoutComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AppLayoutComponent } from './layout/app-layout/app-layout.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    AppLayoutComponent\r\n  ],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent implements OnInit {\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout></app-layout>"
        },
        {
            "name": "AppLayoutComponent",
            "id": "component-AppLayoutComponent-82d0bc1733b0ebcaf619eed537a5cbf5d580385ca899fdaa66e455d1d9e93abc9c5c57aabe9f16a9e79219b71aa9f809b52393d7d5c13f38f5e9fb3766921d16",
            "file": "src/app/layout/app-layout/app-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app-layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-layout',\r\n  standalone: true,\r\n  imports: [\r\n    RouterModule\r\n  ],\r\n  templateUrl: './app-layout.component.html',\r\n  styleUrl: './app-layout.component.scss'\r\n})\r\nexport class AppLayoutComponent {\r\n\r\n}\r\n",
            "styleUrl": "./app-layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"app-layout-container p-3\">\r\n    <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "BaseComponent",
            "id": "component-BaseComponent-00fe90493364f763f9b837ba7a13240fe4afb6a268f08c630cfd45324377a66069104feaf0e2fb401c4a07ac0f77601691cbcd18b7755dbd923064c4aa547416",
            "file": "src/app/libraries/base-component/base-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "base-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./base-component.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'base-component',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './base-component.component.html',\r\n  styleUrl: './base-component.component.scss'\r\n})\r\nexport class BaseComponent implements OnDestroy {\r\n  subscriptions: Subscription[] = [];\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.map(x => x?.unsubscribe());\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./base-component.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<p>base-component works!</p>\r\n"
        },
        {
            "name": "ButtonStyleComponent",
            "id": "component-ButtonStyleComponent-5b81da61c2a129d6b7256c7bc879dffa85acd74f17e0dc46e6448b2ce6c0ca7e662be2b70349985acafcffd3b8d0e5dbf92cbe391ff17e12ad326730776a87d2",
            "file": "src/app/demo/button-style/button-style.component.ts",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-style",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button-style.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "size",
                    "defaultValue": "EButtonSize.SMALL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "theme",
                    "defaultValue": "EButtonType.SUCCESS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CoreButtonDemoComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { CoreButtonDemoComponent } from '../core-button-demo/core-button-demo.component';\r\nimport { EButtonSize, EButtonType } from '../../enum/enum-button';\r\n\r\n@Component({\r\n  selector: 'app-button-style',\r\n  standalone: true,\r\n  imports: [\r\n    CoreButtonDemoComponent\r\n  ],\r\n  templateUrl: './button-style.component.html',\r\n  styleUrl: './button-style.component.scss',\r\n  encapsulation: ViewEncapsulation.ShadowDom\r\n})\r\nexport class ButtonStyleComponent {\r\n  size = EButtonSize.SMALL;\r\n  theme = EButtonType.SUCCESS;\r\n}\r\n",
            "styleUrl": "./button-style.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n    <button class=\"btn btn-success\">Button</button>\r\n    <button class=\"btn btn-success-hover\">Button</button>\r\n    <button class=\"btn btn-success-active\">Button</button>\r\n    <button class=\"btn btn-disabled\">Button</button>\r\n    <button class=\"btn btn-success btn-sm\">Button</button>\r\n    <button class=\"btn btn-disabled btn-lg\">Button</button>\r\n</div>\r\n<br>\r\n<div>\r\n    <button class=\"btn btn-primary\">Button</button>\r\n    <button class=\"btn btn-primary-hover\">Button</button>\r\n    <button class=\"btn btn-primary-active\">Button</button>\r\n    <button class=\"btn btn-disabled\">Button</button>\r\n</div>\r\n<br>\r\n<div>\r\n    <core-button-demo>Button</core-button-demo>\r\n    <core-button-demo [size]=\"size\" [theme]=\"theme\">Button</core-button-demo>\r\n    <core-button-demo [size]=\"size\" [theme]=\"theme\">Button</core-button-demo>\r\n</div>"
        },
        {
            "name": "ControlDemoComponent",
            "id": "component-ControlDemoComponent-f034cddd21e4f103109e3bc1fa671a61b46ec9e4a3758866387ae929598cc5699e229abb39db3ece11dc47df75756a2d14a5422165d89365d7e73a8ce54328a5",
            "file": "src/app/demo/control-demo/control-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "control-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./control-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formName",
                    "defaultValue": "'DEMO'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sections",
                    "defaultValue": "signal<ICoreFormSection[]>([\r\n    {\r\n      caption: 'For Example',\r\n      rows: [\r\n        [\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'textbox',\r\n            label: 'TEXTBOX',\r\n            value: '',\r\n            type: 'text',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'checkbox',\r\n            label: 'CHECKBOX',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "sectionsCkb",
                    "defaultValue": "[\r\n    {\r\n      caption: 'For Checkbox',\r\n      rows: [\r\n        [\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'controlType',\r\n            label: 'Label',\r\n            value: 'CHECKBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'checkbox',\r\n            label: 'field',\r\n            value: 'TEXTBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'label',\r\n            label: 'Label',\r\n            value: '',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'flexSize',\r\n            label: 'Flex Size',\r\n            value: null,\r\n            type: 'number',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n            validators: [\r\n              {\r\n                name: 'testCustomValidation',\r\n                validator: ControlDemoComponent.testCustomValidation,\r\n                errorMessage: 'This field is required'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'disabled',\r\n            label: 'Disabled',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          // {\r\n          //   controlType: EnumFormBaseControlType.CHECKBOX,\r\n          //   field: 'readonly',\r\n          //   label: 'Readonly',\r\n          //   value: false,\r\n          //   type: 'boolean',\r\n          //   flexSize: 4,\r\n          //   readonly: false,\r\n          //   hidden: false,\r\n          // },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'hidden',\r\n            label: 'Hidden',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreFormSection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "sectionsTxt",
                    "defaultValue": "[\r\n    {\r\n      caption: 'For TextBox',\r\n      rows: [\r\n        [\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'controlType',\r\n            label: 'controlType',\r\n            value: 'TEXTBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'textbox',\r\n            label: 'field',\r\n            value: 'TEXTBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'label',\r\n            label: 'Label',\r\n            value: '',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n            validators: [\r\n              {\r\n                name: IFnNameValidator.required,\r\n                validator: Validators.required,\r\n                errorMessage: 'This field is required'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'type',\r\n            label: 'Type',\r\n            value: null,\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'flexSize',\r\n            label: 'Flex Size',\r\n            value: null,\r\n            type: 'number',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'required',\r\n            label: 'Required',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'disabled',\r\n            label: 'Disabled',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'readonly',\r\n            label: 'Readonly',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'hidden',\r\n            label: 'Hidden',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreFormSection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "convertToControl",
                    "args": [
                        {
                            "name": "control",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IFormBaseControl",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSetSection",
                    "args": [
                        {
                            "name": "_rowIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "_controlIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "control",
                            "type": "IFormBaseControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_rowIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "_controlIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "control",
                            "type": "IFormBaseControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmitCkb",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmitTxt",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testCustomValidation",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any | null",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CoreFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { CoreFormComponent } from '../../libraries/core-form/core-form.component';\r\nimport { EnumFormBaseControlType, ICoreFormSection, IFnNameValidator, IFormBaseControl } from '../../enum/enum-interfaces';\r\nimport { AbstractControl, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CustomValidators } from '../../libraries/core-form/custom-validators';\r\n\r\n@Component({\r\n  selector: 'control-demo',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    CoreFormComponent\r\n  ],\r\n  templateUrl: './control-demo.component.html',\r\n  styleUrl: './control-demo.component.scss'\r\n})\r\nexport class ControlDemoComponent {\r\n\r\n  formName = 'DEMO';\r\n\r\n  sectionsTxt: ICoreFormSection[] = [\r\n    {\r\n      caption: 'For TextBox',\r\n      rows: [\r\n        [\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'controlType',\r\n            label: 'controlType',\r\n            value: 'TEXTBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'textbox',\r\n            label: 'field',\r\n            value: 'TEXTBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'label',\r\n            label: 'Label',\r\n            value: '',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n            validators: [\r\n              {\r\n                name: IFnNameValidator.required,\r\n                validator: Validators.required,\r\n                errorMessage: 'This field is required'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'type',\r\n            label: 'Type',\r\n            value: null,\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'flexSize',\r\n            label: 'Flex Size',\r\n            value: null,\r\n            type: 'number',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'required',\r\n            label: 'Required',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'disabled',\r\n            label: 'Disabled',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'readonly',\r\n            label: 'Readonly',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'hidden',\r\n            label: 'Hidden',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ];\r\n  sectionsCkb: ICoreFormSection[] = [\r\n    {\r\n      caption: 'For Checkbox',\r\n      rows: [\r\n        [\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'controlType',\r\n            label: 'Label',\r\n            value: 'CHECKBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'checkbox',\r\n            label: 'field',\r\n            value: 'TEXTBOX',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: true,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'label',\r\n            label: 'Label',\r\n            value: '',\r\n            type: 'text',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'flexSize',\r\n            label: 'Flex Size',\r\n            value: null,\r\n            type: 'number',\r\n            flexSize: 12,\r\n            readonly: false,\r\n            hidden: false,\r\n            validators: [\r\n              {\r\n                name: 'testCustomValidation',\r\n                validator: ControlDemoComponent.testCustomValidation,\r\n                errorMessage: 'This field is required'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'disabled',\r\n            label: 'Disabled',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          // {\r\n          //   controlType: EnumFormBaseControlType.CHECKBOX,\r\n          //   field: 'readonly',\r\n          //   label: 'Readonly',\r\n          //   value: false,\r\n          //   type: 'boolean',\r\n          //   flexSize: 4,\r\n          //   readonly: false,\r\n          //   hidden: false,\r\n          // },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'hidden',\r\n            label: 'Hidden',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ];\r\n  sections = signal<ICoreFormSection[]>([\r\n    {\r\n      caption: 'For Example',\r\n      rows: [\r\n        [\r\n          {\r\n            controlType: EnumFormBaseControlType.TEXTBOX,\r\n            field: 'textbox',\r\n            label: 'TEXTBOX',\r\n            value: '',\r\n            type: 'text',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          },\r\n          {\r\n            controlType: EnumFormBaseControlType.CHECKBOX,\r\n            field: 'checkbox',\r\n            label: 'CHECKBOX',\r\n            value: false,\r\n            type: 'boolean',\r\n            flexSize: 4,\r\n            readonly: false,\r\n            hidden: false,\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ]);\r\n  onSubmitTxt($event: any) {\r\n    let control: IFormBaseControl = this.convertToControl($event);\r\n    control.field = 'textbox';\r\n    control.controlType = EnumFormBaseControlType.TEXTBOX;\r\n    this.onSetSection(0, 0, control);\r\n  }\r\n\r\n  onSubmitCkb($event: any) {\r\n    let control: IFormBaseControl = this.convertToControl($event);\r\n    control.controlType = EnumFormBaseControlType.CHECKBOX;\r\n    control.field = 'checkbox';\r\n    this.onSetSection(0, 1, control);\r\n  }\r\n\r\n  onSetSection(_rowIndex: number, _controlIndex: number, control: IFormBaseControl) {\r\n    this.sections.set([...this.sections().map((section, sectionIndex) => {\r\n      if (sectionIndex === 0) {\r\n        return {\r\n          ...section,\r\n          rows: section.rows.map((row, rowIndex) =>\r\n            rowIndex === _rowIndex ? row.map((ctrl, ctrlIndex) =>\r\n              ctrlIndex === _controlIndex ? control : ctrl\r\n            ) : row\r\n          )\r\n        };\r\n      }\r\n      return section;\r\n    })]);\r\n  }\r\n  convertToControl(control: any): IFormBaseControl {\r\n    control.validators = [];\r\n    if (control.required) {\r\n      control.validators.push({\r\n        name: IFnNameValidator.required,\r\n        validator: Validators.required,\r\n        errorMessage: 'This field is required'\r\n      })\r\n    }\r\n    return control as IFormBaseControl;\r\n  }\r\n  onCancel($event: any) {\r\n  }\r\n\r\n\r\n  static testCustomValidation(control: AbstractControl): any | null {\r\n    return CustomValidators.core('testCustomValidation', false,'Loiiii ne');\r\n  }\r\n\r\n  get sectionsValue(): ICoreFormSection[] {\r\n    return this.sections() ?? [];\r\n  }\r\n}\r\n",
            "styleUrl": "./control-demo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "sectionsValue": {
                    "name": "sectionsValue",
                    "getSignature": {
                        "name": "sectionsValue",
                        "type": "[]",
                        "returnType": "ICoreFormSection[]",
                        "line": 291
                    }
                }
            },
            "templateData": "<div class=\"row\">\r\n    <div class=\"col-md-3\">\r\n        <core-form [formName]=\"formName\" [inputSections]=\"sectionsTxt\" (onSubmit)=\"onSubmitTxt($event)\"\r\n            (onCancel)=\"onCancel($event)\"></core-form>\r\n    </div>\r\n    <div class=\"col-md-3\">\r\n        <core-form [formName]=\"formName\" [inputSections]=\"sectionsCkb\" (onSubmit)=\"onSubmitCkb($event)\"\r\n            (onCancel)=\"onCancel($event)\"></core-form>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n        <core-form [formName]=\"formName\" [inputSections]=\"sectionsValue\"></core-form>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CoreButtonComponent",
            "id": "component-CoreButtonComponent-8164792aebed57ff74e264ba6ded796d977ed9053bf56103b43bdb0b823ecfc40d430f9cfdb7ea624df9074add0e04882d093d751abb90a9f28f937e4cc0a1d8",
            "file": "src/app/libraries/core-button/core-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "handleButtonBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                },
                {
                    "name": "handleButtonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false
                },
                {
                    "name": "handleButtonFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                },
                {
                    "name": "handleButtonHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClass",
                    "defaultValue": "computed(() => {\r\n    return {\r\n      btn: true,\r\n      [`btn-${this.theme()}`]: !!this.theme(),\r\n      [`btn-${this.theme()}-${this.state()}`]: !!this.theme() && !!this.state(),\r\n      [`btn-${this.size()}`]: !!this.size(),\r\n    }\r\n  }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "handleButtonBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false
                },
                {
                    "name": "handleButtonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false
                },
                {
                    "name": "handleButtonFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                },
                {
                    "name": "handleButtonHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false
                },
                {
                    "name": "size",
                    "defaultValue": "input<EButtonSize>(EButtonSize.MEDIUM)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "state",
                    "defaultValue": "input<EButtonState>(EButtonState.NONE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "theme",
                    "defaultValue": "input<EButtonType | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ]
                },
                {
                    "name": "onHover",
                    "args": [
                        {
                            "name": "isHovered",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "isHovered",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, computed, input, output } from '@angular/core';\r\nimport { EButtonType, EButtonSize, EButtonState } from '../../enum/enum-button';\r\nimport { BaseComponent } from '../base-component/base-component.component';\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport abstract class CoreButtonComponent {\r\n  // Input properties\r\n  theme = input<EButtonType | undefined>();\r\n  size = input<EButtonSize>(EButtonSize.MEDIUM);\r\n  state = input<EButtonState>(EButtonState.NONE);\r\n\r\n  // Output signals\r\n  handleButtonClick = output<void>();\r\n  handleButtonHover = output<boolean>()\r\n  handleButtonFocus = output<void>()\r\n  handleButtonBlur = output<void>()\r\n\r\n  buttonClass = computed(() => {\r\n    return {\r\n      btn: true,\r\n      [`btn-${this.theme()}`]: !!this.theme(),\r\n      [`btn-${this.theme()}-${this.state()}`]: !!this.theme() && !!this.state(),\r\n      [`btn-${this.size()}`]: !!this.size(),\r\n    }\r\n  }\r\n  );\r\n  // Abstract methods\r\n  abstract onClick(): void;\r\n  abstract onHover(isHovered: boolean): void;\r\n  abstract onFocus(): void;\r\n  abstract onBlur(): void;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CoreButtonDemoComponent",
            "id": "component-CoreButtonDemoComponent-a47ffdad68fb05e790c7b582f45838d4481f626a7fedfa27e6b3daa03d4e0c243159f1ca1367d0e64d4cc995921026d16c5c3150b40f3bd117c47862f74883c7",
            "file": "src/app/demo/core-button-demo/core-button-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "core-button-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-button-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "handleButtonBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClass",
                    "defaultValue": "computed(() => {\r\n    return {\r\n      btn: true,\r\n      [`btn-${this.theme()}`]: !!this.theme(),\r\n      [`btn-${this.theme()}-${this.state()}`]: !!this.theme() && !!this.state(),\r\n      [`btn-${this.size()}`]: !!this.size(),\r\n    }\r\n  }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "handleButtonHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "required": false,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "size",
                    "defaultValue": "input<EButtonSize>(EButtonSize.MEDIUM)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "state",
                    "defaultValue": "input<EButtonState>(EButtonState.NONE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "theme",
                    "defaultValue": "input<EButtonType | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                },
                {
                    "name": "onHover",
                    "args": [
                        {
                            "name": "isHovered",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "jsdoctags": [
                        {
                            "name": "isHovered",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreButtonComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CoreButtonComponent } from '../../libraries/core-button/core-button.component';\r\n\r\n@Component({\r\n  selector: 'core-button-demo',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './core-button-demo.component.html',\r\n  styleUrl: './core-button-demo.component.scss'\r\n})\r\nexport class CoreButtonDemoComponent extends CoreButtonComponent {\r\n  override onClick(): void {\r\n  }\r\n  override onHover(isHovered: boolean): void {\r\n  }\r\n  override onFocus(): void {\r\n  }\r\n  override onBlur(): void {\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./core-button-demo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [
                "CoreButtonComponent"
            ],
            "templateData": "<button [class]=\"buttonClass()\" (click)=\"onClick()\" (mouseenter)=\"onHover(true)\" (mouseleave)=\"onHover(false)\">\r\n    <ng-content></ng-content>\r\n</button>"
        },
        {
            "name": "CoreCheckBoxComponent",
            "id": "component-CoreCheckBoxComponent-3ac4229c8a5df60da1a4ad036b796c0cfa9dc9db54ae764f6dc07c9ad8d477f0aebc13b2606a4c98a57cfd69bc49b3c7ae5f8791630a64604f35f60e160e38c4",
            "file": "src/app/libraries/core-check-box/core-check-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: CoreCheckBoxComponent\n}",
                    "type": "component"
                }
            ],
            "selector": "core-check-box",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-check-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "required": false,
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": false
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "required": false
                },
                {
                    "name": "text",
                    "defaultValue": "input<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onLabelClick",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, effect, input, Input, output } from '@angular/core';\r\nimport { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { CoreFormControlBaseComponent } from '../core-form-control-base/core-form-control-base.component';\r\n\r\n@Component({\r\n  selector: 'core-check-box',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: CoreCheckBoxComponent\r\n    }\r\n  ],\r\n  templateUrl: './core-check-box.component.html',\r\n  styleUrl: './core-check-box.component.scss'\r\n})\r\nexport class CoreCheckBoxComponent extends CoreFormControlBaseComponent {\r\n  text = input<string>('');\r\n  inputValue = input<boolean>(false);\r\n  @Input({ transform: (value: any) => value !== null && value !== undefined ? value : false }) override disabled!: boolean;\r\n  onClick = output<boolean>();\r\n\r\n\r\n  constructor() {\r\n    super();\r\n    effect(() => {\r\n      this.writeValue(this.inputValue());\r\n    });\r\n  }\r\n  onLabelClick(_: any) {\r\n    if (this.disabled == true || this.readonly == true) {\r\n      return\r\n    }\r\n    this.value = !this.value;\r\n    this.onClick.emit(this.value);\r\n    this.markAsTouched();\r\n    this.onChange(this.value);\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./core-check-box.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "extends": [
                "CoreFormControlBaseComponent"
            ],
            "templateData": "<div>\r\n    <div\r\n      class=\"core-checkbox-container w-100\"\r\n      (click)=\"onLabelClick($event)\"\r\n      [class.form-control-disabled]=\"disabled\"\r\n    >\r\n      <input type=\"checkbox\" [(ngModel)]=\"value\" class=\"form-control\"/>\r\n      <label class=\"w-100\">\r\n        <a class=\"checkmark\" [class.disabled]=\"disabled\"></a>\r\n        <span>\r\n          {{ text() }}\r\n        </span>\r\n      </label>\r\n    </div>\r\n  </div>\r\n  "
        },
        {
            "name": "CoreControlComponent",
            "id": "component-CoreControlComponent-29ebb39940ed74c92511c5bcb33702b00c18d99c1b2d09127d5a8ffd889b847c523bddfc3c12db52c8e58e905667ebb0d954f984fcb3b565e9e5ed73673673d3",
            "file": "src/app/libraries/core-control/core-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "core-control",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-control.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "BehaviorSubject<boolean>",
                    "decorators": []
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": true
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "required": true
                },
                {
                    "name": "errors",
                    "defaultValue": "signal<IError[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "required": true
                },
                {
                    "name": "isRequired",
                    "defaultValue": "signal<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "rawControl",
                    "defaultValue": "signal<AbstractControl | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "checkError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreatedRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "watchCheckError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "watchRawControlStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CoreTextBoxComponent",
                    "type": "component"
                },
                {
                    "name": "CoreCheckBoxComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, effect, input, Input, OnChanges, OnDestroy, OnInit, signal, SimpleChanges } from '@angular/core';\r\nimport { CoreCheckBoxComponent } from '../core-check-box/core-check-box.component';\r\nimport { CoreTextBoxComponent } from '../core-text-box/core-text-box.component';\r\nimport { AbstractControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { BaseComponent } from '../base-component/base-component.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IError, IFnNameValidator, IFormBaseControl } from '../../enum/enum-interfaces';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'core-control',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    CoreTextBoxComponent,\r\n    CoreCheckBoxComponent\r\n  ],\r\n  templateUrl: './core-control.component.html',\r\n  styleUrl: './core-control.component.scss'\r\n})\r\nexport class CoreControlComponent extends BaseComponent implements OnInit {\r\n  control = input.required<IFormBaseControl>();\r\n  form = input.required<FormGroup>();\r\n  @Input() checkError$!: BehaviorSubject<boolean>;\r\n\r\n  rawControl = signal<AbstractControl | null>(null);\r\n  isRequired = signal<boolean>(false);\r\n  errors = signal<IError[]>([]);\r\n\r\n  constructor() {\r\n    super();\r\n    effect(() => {\r\n      this.onCreatedRequired();\r\n      this.watchRawControlStatus();\r\n      this.watchCheckError();\r\n    }, { allowSignalWrites: true });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.onCreatedRequired();\r\n    this.rawControl.set(this.form().get(this.control().field) ?? null);\r\n  }\r\n\r\n  watchRawControlStatus(): void {\r\n    const control = this.rawControl();\r\n    if (!control) return;\r\n    control.statusChanges.subscribe(() => this.checkError());\r\n  }\r\n\r\n  watchCheckError(): void {\r\n    if (!this.checkError$) return;\r\n    this.checkError$.subscribe((checkError) => {\r\n      checkError ? this.checkError() : this.resetError();\r\n    });\r\n  }\r\n\r\n  checkError(): void {\r\n    const control = this.rawControl();\r\n    if (!control || !control.errors) {\r\n      this.errors.set([]);\r\n      return;\r\n    }\r\n    const newErrors: IError[] = [];\r\n    Object.keys(control.errors).forEach((key) => {\r\n      const errorValue = control.errors![key];\r\n      if (Array.isArray(errorValue)) {\r\n        newErrors.push({ key, errorMessage: errorValue[1] });\r\n      } else {\r\n        const validator = this.control().validators?.find(v => v.name.toLowerCase() === key.toLowerCase());\r\n        if (validator) {\r\n          newErrors.push({ key, errorMessage: validator.errorMessage! });\r\n        }\r\n      }\r\n    });\r\n\r\n    this.errors.set(newErrors);\r\n  }\r\n\r\n  resetError(): void {\r\n    this.errors.set([]);\r\n  }\r\n\r\n  onCreatedRequired(): void {\r\n    this.isRequired.set(this.control().validators?.some(x => x.name === IFnNameValidator.required) ?? false);\r\n  }\r\n  onFocus(e: any) {\r\n    if (this.control().disabled || this.control().readonly) return;\r\n    this.control().focus$?.next(e);\r\n  }\r\n\r\n  onBlur(e: any) {\r\n    if (this.control().disabled || this.control().readonly) return;\r\n    const control = this.form().get(this.control().field);\r\n    this.control().blur$?.next(e);\r\n    if (control && control.invalid) {\r\n      control.markAsTouched();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./core-control.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "extends": [
                "BaseComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"core-control-container\">\r\n    <div [formGroup]=\"form()\" [class.hidden]=\"!!control().hidden\">\r\n        <div class=\"w-100 d-flex flex-column justify-content-between\">\r\n            <label class=\"control-label pb-1\">\r\n                <span [class]=\"'label-value' +  (isRequired() ? ' required' : '')\">\r\n                    @if(control().controlType === 'CHECKBOX' || !control().label){\r\n                        &nbsp;\r\n                    }@else {\r\n                        {{control().label}}\r\n                    }\r\n                </span>\r\n            </label>\r\n\r\n            @switch (control().controlType) {\r\n                @case('TEXTBOX') {\r\n                    <core-text-box [formControlName]=\"control().field\" [inputValue]=\"control().value\"\r\n                    [control]=\"control()\" (onBlur)=\"onBlur($event)\" (onFocus)=\"onFocus($event)\"></core-text-box>\r\n                }\r\n                @case('CHECKBOX') {\r\n                    <core-check-box [formControlName]=\"control().field\" [text]=\"control().label\"\r\n                        [inputValue]=\"control().value\"></core-check-box>\r\n                }\r\n                @default {\r\n                    <core-text-box [formControlName]=\"control().field\" [inputValue]=\"control().value\"\r\n                    [control]=\"control()\" (onBlur)=\"onBlur($event)\" (onFocus)=\"onFocus($event)\"></core-text-box>\r\n                }\r\n            }\r\n\r\n            <!-- Messages error -->\r\n            @if(!!errors().length){\r\n                @for (error of errors(); track $index) {\r\n                    <div class=\"form-control-error\">\r\n                        {{ error.errorMessage }}\r\n                    </div>\r\n                }\r\n            }\r\n            @if(!!errors!.length && errors().length == 0 && !!checkError$.value){\r\n                <div>\r\n                    {{ '&nbsp;' }}\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>\r\n\r\n</div>"
        },
        {
            "name": "CoreFormComponent",
            "id": "component-CoreFormComponent-57432e11cd595a2c005e4e9a78ca6d54471d3d140a6df2eddec4c06abac751db0b508c1b99449bc173fa165114fb7a1f8b0483fb26f5b0ea296535a2fc0cee49",
            "file": "src/app/libraries/core-form/core-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "core-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkError$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "formName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "required": false
                },
                {
                    "name": "onCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "required": false
                },
                {
                    "name": "onFormCreated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "onSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "required": false
                },
                {
                    "name": "changeDetectorRef",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "coreControlService",
                    "defaultValue": "inject(CoreControlService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "formName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "required": false
                },
                {
                    "name": "inputSections",
                    "defaultValue": "input.required<ICoreFormSection[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "onCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "required": false
                },
                {
                    "name": "onFormCreated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "required": false
                },
                {
                    "name": "onSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "required": false
                },
                {
                    "name": "payLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "prevSections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICoreFormSection[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sections",
                    "defaultValue": "this.inputSections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onBuildForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFormSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CoreControlComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, computed, effect, EventEmitter, inject, Inject, input, Input, OnChanges, OnDestroy, OnInit, output, Output, signal, SimpleChanges } from '@angular/core';\r\nimport { ICoreFormSection } from '../../enum/enum-interfaces';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CoreControlService } from '../core-control/core-control.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CoreControlComponent } from '../core-control/core-control.component';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { BaseComponent } from '../base-component/base-component.component';\r\n\r\n@Component({\r\n  selector: 'core-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    CoreControlComponent\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  templateUrl: './core-form.component.html',\r\n  styleUrl: './core-form.component.scss'\r\n})\r\nexport class CoreFormComponent extends BaseComponent {\r\n  \r\n  private coreControlService = inject(CoreControlService);\r\n\r\n\r\n\r\n  private changeDetectorRef = inject(ChangeDetectorRef);\r\n\r\n  formName = input<string>();\r\n  inputSections = input.required<ICoreFormSection[]>();\r\n  @Input() checkError$ = new BehaviorSubject<boolean>(false);\r\n\r\n  onFormCreated = output<any>();\r\n  onSubmit = output<any>();\r\n  onCancel = output<any>();\r\n  buttonClick = output<any>();\r\n\r\n  form!: FormGroup;\r\n  sections = this.inputSections;\r\n  prevSections!: ICoreFormSection[];\r\n\r\n  payLoad!: any;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(\r\n  ) {\r\n    super();\r\n    effect(() => {\r\n      this.onBuildForm();\r\n    })\r\n  }\r\n  //with signal, this is not necessary\r\n  // updateSections(newSections: ICoreFormSection[]): void {\r\n  //   this.sections().map((section, sectionIndex) => {\r\n  //     const newSection = newSections[sectionIndex];\r\n  //     section.rows.map((row, rowIndex) => {\r\n  //       const newRow = newSection.rows[rowIndex];\r\n  //       row.map((control, controlIndex) => {\r\n  //         const newControl = newRow[controlIndex];\r\n  //         control.hidden = newControl?.hidden;\r\n  //       });\r\n  //     });\r\n\r\n  //   });\r\n\r\n  // }\r\n\r\n  onBuildForm(): void {\r\n    const mainGroup = this.coreControlService.toFormGroup(this.inputSections());\r\n    if (!this.form && JSON.stringify(this.inputSections()) !== JSON.stringify(this.prevSections)) {\r\n      this.form = new FormGroup(mainGroup);\r\n    } else {\r\n      this.coreControlService.updateFormGroup(this.form, mainGroup);\r\n      // this.updateSections(newSections);\r\n    }\r\n\r\n    this.prevSections = this.inputSections();\r\n    this.onFormCreated.emit({\r\n      formName: this.formName,\r\n      formGroup: this.form,\r\n    });\r\n\r\n    this.changeDetectorRef.detectChanges();\r\n\r\n  }\r\n  onFormSubmit() {\r\n    this.checkError$.next(true);\r\n    this.payLoad = JSON.stringify(this.form.getRawValue(), (key, value) =>\r\n      value === undefined ? null : value, 2);\r\n    if (!!this.form.valid) {\r\n      this.onSubmit.emit(this.form?.getRawValue());\r\n    }\r\n  }\r\n  onFormReset() {\r\n    this.form.reset();\r\n    this.checkError$.next(false);\r\n  }\r\n}\r\n",
            "styleUrl": "./core-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44,
                "rawdescription": "\n\n\n"
            },
            "extends": [
                "BaseComponent"
            ],
            "templateData": "@if(!!form){\r\n<div class=\"core-form-container\">\r\n    <form #formRef (ngSubmit)=\"onFormSubmit()\" [formGroup]=\"form\" autocomplete=\"off\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                @for (section of sections(); track $index) {\r\n                <div class=\"section\">\r\n                    @if (section.caption) {\r\n                        <div class=\"section-header-label\">\r\n                            <div class=\"section-caption\">{{ section.caption }}</div>\r\n                        </div>\r\n                    }\r\n                    \r\n                    @for (row of section.rows; track $index) {\r\n                    <div class=\"row mb15\">\r\n                        @for (col of row; track $index) {\r\n                            @if(col.hidden !== true){\r\n                            <div [class]=\"'col-md-' + col.flexSize\">\r\n                                <core-control [control]=\"col\" [form]=\"form\" [checkError$]=\"checkError$\"></core-control>\r\n                            </div>\r\n                            }\r\n                        }\r\n                    </div>\r\n                    }\r\n                </div>\r\n                }\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n            <div class=\"col-md-12 \">\r\n                <div class=\"row justify-content-center\">\r\n                    <div class=\"btn btn__primary col-md-3\" (click)=\"onFormSubmit()\">\r\n                        <p>Submit</p>\r\n                    </div>\r\n                    <!-- <div class=\"btn btn__secondary col-md-3\" (click)=\"onFormReset()\">\r\n                        <p>Reset</p>\r\n                    </div> -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n\r\n    @if(payLoad){\r\n        <div class=\"form-row payload-preview\">\r\n            <strong>Current values</strong><br>{{payLoad}}\r\n        </div>\r\n    }\r\n</div>\r\n}"
        },
        {
            "name": "CoreFormControlBaseComponent",
            "id": "component-CoreFormControlBaseComponent-a4e035eaf2248581e53c73da244745653bce811a0ca0fc0f030ffdeeac0e7d0999936c5a8cdd2a5b7eeb8b291a424732af491427ccacd2ec9aef7761e259b098",
            "file": "src/app/libraries/core-form-control-base/core-form-control-base.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: CoreFormControlBaseComponent\n}",
                    "type": "component"
                }
            ],
            "selector": "core-form-control-base",
            "styleUrls": [
                "./core-form-control-base.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./core-form-control-base.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'core-form-control-base',\r\n  templateUrl: './core-form-control-base.component.html',\r\n  styleUrls: ['./core-form-control-base.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: CoreFormControlBaseComponent\r\n    }\r\n  ]\r\n})\r\nexport class CoreFormControlBaseComponent implements ControlValueAccessor {\r\n\r\n  value: any;\r\n\r\n  onChange = (_: any) => { };\r\n\r\n  onTouched = () => { };\r\n\r\n  touched: boolean = false;\r\n\r\n  disabled: boolean = false;\r\n\r\n  readonly: boolean = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this.value = obj;\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  markAsTouched() {\r\n    if (!this.touched) {\r\n      this.onTouched();\r\n      this.touched = true;\r\n    }\r\n  }\r\n\r\n  setDisabledState(disabled: boolean) {\r\n    this.disabled = disabled;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./core-form-control-base.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": ""
        },
        {
            "name": "CoreTextBoxComponent",
            "id": "component-CoreTextBoxComponent-d8a01a9feae30cbbcd218f35a343163d969b4dfe6a378a50b0324e9c75ab73a4cf5fcc13a58914cfbea34b96323827931a4af72d259f4d7d9fa1bd3728899780",
            "file": "src/app/libraries/core-text-box/core-text-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: CoreTextBoxComponent\n}",
                    "type": "component"
                }
            ],
            "selector": "core-text-box",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core-text-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Input required: control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInput required: control\n",
                    "jsdoctags": [
                        {
                            "pos": 929,
                            "end": 962,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 930,
                                "end": 937,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "summary"
                            },
                            "comment": "<p>: &#39;IFormBaseControl&#39;</p>\n"
                        }
                    ],
                    "required": true
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": true
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "required": false
                },
                {
                    "name": "onFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Input required: control</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nInput required: control\n",
                    "jsdoctags": [
                        {
                            "pos": 929,
                            "end": 962,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 930,
                                "end": 937,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "summary"
                            },
                            "comment": "<p>: &#39;IFormBaseControl&#39;</p>\n"
                        }
                    ],
                    "required": true
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "required": true
                },
                {
                    "name": "onBlur",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "required": false
                },
                {
                    "name": "onFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "required": false
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CoreFormControlBaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, effect, input, Input, OnChanges, OnDestroy, OnInit, output, SimpleChanges } from '@angular/core';\r\nimport { CoreFormControlBaseComponent } from '../core-form-control-base/core-form-control-base.component';\r\nimport { IFormBaseControl } from '../../enum/enum-interfaces';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'core-text-box',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: CoreTextBoxComponent\r\n    }\r\n  ],\r\n  templateUrl: './core-text-box.component.html',\r\n  styleUrl: './core-text-box.component.scss'\r\n})\r\nexport class CoreTextBoxComponent extends CoreFormControlBaseComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Input required: control\r\n   * @summary: 'IFormBaseControl'\r\n   */\r\n  control = input.required<IFormBaseControl>();\r\n  inputValue = input.required<any>();\r\n\r\n  onFocus = output<any>();\r\n  onBlur = output<any>();\r\n\r\n  constructor() {\r\n    super();\r\n    effect(() => {\r\n      if (this.touched || this.control().value) {\r\n        this.writeValue(this.inputValue())\r\n      }\r\n    });\r\n  }\r\n  ngOnInit(): void {\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n}",
            "styleUrl": "./core-text-box.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "extends": [
                "CoreFormControlBaseComponent"
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\r\n    <input [(ngModel)]=\"value\" (ngModelChange)=\"writeValue($event)\" class=\"form-control\"\r\n        [readOnly]=\"control().readonly ||control().disabled\" [type]=\"control().type\"\r\n        [class.form-control-disabled]=\"control().disabled\" (focus)=\"onFocus.emit($event)\"\r\n        (blur)=\"onBlur.emit($event)\">\r\n</div>"
        },
        {
            "name": "SignalComponent",
            "id": "component-SignalComponent-e20c1a1d5423c4e7b3507d5784867c9f9d5ba8f8bf53375645cbc33f362041a9fd5c43273ec337e01be4fe1e6f0422652e5f4cadd511eb78bd6f2f73bc8ad8f7",
            "file": "src/app/demo/signal-demo/signal-demo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signal-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./signal-demo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "countComp",
                    "defaultValue": "computed(() => this.countSignal() * 2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "countCompFormEffect",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "countSignal",
                    "defaultValue": "signal(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "demo",
                    "defaultValue": "signal({ name: 'signal-dem' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "timer$",
                    "defaultValue": "interval(1000)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "increment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, computed, effect, signal, untracked } from '@angular/core';\r\nimport { interval } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-signal-demo',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './signal-demo.component.html',\r\n  styleUrl: './signal-demo.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SignalComponent {\r\n  count = 0;\r\n  countSignal = signal(0);\r\n  countComp = computed(() => this.countSignal() * 2);\r\n  countCompFormEffect = 1;\r\n\r\n  demo = signal({ name: 'signal-dem' });\r\n\r\n  timer$ = interval(1000);\r\n  // toSignalTimer = toSignal(this.timer$);\r\n\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      untracked(() => {\r\n        this.count * this.countComp()\r\n      })\r\n    }, {})\r\n\r\n    setTimeout(() => {\r\n      this.demo.set({ name: '' });\r\n    }, 1000)\r\n  }\r\n\r\n  increment() {\r\n    this.count += 1;\r\n    this.countSignal.update(value => value + 1);\r\n  }\r\n}\r\n",
            "styleUrl": "./signal-demo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "extends": [],
            "templateData": "<div class=\"container-sm\">100% wide until small breakpoint</div>\r\n<div class=\"container-md\">100% wide until medium breakpoint</div>\r\n<div class=\"container-lg\">100% wide until large breakpoint</div>\r\n<div class=\"container-xl\">100% wide until extra large breakpoint</div>\r\n<div class=\"container-xxl\">100% wide until extra extra large breakpoint</div>"
        },
        {
            "name": "TaskBoxComponent",
            "id": "component-TaskBoxComponent-24d887f867e8887b0f8fad9f52ad4771fb2a4912001cc5a8193bbe63a2798927a0ce3392ebc2d1e6b25fe5816e1a421906ea0093b3d963dbe5c175e106360244",
            "file": "src/app/demo/task-box/task-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "task-box",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./task-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe shape of the task object\n",
                    "description": "<p>The shape of the task object</p>\n",
                    "line": 20,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nexport interface Task {\r\n    id?: string;\r\n    title?: string;\r\n    state?: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'task-box',\r\n    standalone: true,\r\n    templateUrl: './task-box.component.html',\r\n    styleUrl: './task-box.component.scss',\r\n})\r\n\r\nexport class TaskBoxComponent {\r\n    /**\r\n   * The shape of the task object\r\n  */\r\n    @Input() task?: Task;\r\n\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output()\r\n    onPinTask = new EventEmitter<Event>();\r\n\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output()\r\n    onArchiveTask = new EventEmitter<Event>();\r\n\r\n    /**\r\n     * @ignore\r\n     * Component method to trigger the onPin event\r\n     * @param id string\r\n     */\r\n    onPin(id: any) {\r\n        this.onPinTask.emit(id);\r\n    }\r\n    /**\r\n     * @ignore\r\n     * Component method to trigger the onArchive event\r\n     * @param id string\r\n     */\r\n    onArchive(id: any) {\r\n        this.onArchiveTask.emit(id);\r\n    }\r\n}",
            "styleUrl": "./task-box.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"list-item {{ task?.state }}\">\r\n    <label [attr.aria-label]=\"'archiveTask-' + task?.id\" for=\"checked-{{ task?.id }}\" class=\"checkbox\">\r\n        <input type=\"checkbox\" disabled=\"true\" [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n            name=\"checked-{{ task?.id }}\" id=\"checked-{{ task?.id }}\" />\r\n        <span class=\"checkbox-custom\" (click)=\"onArchive(task?.id)\"></span>\r\n    </label>\r\n    <label [attr.aria-label]=\"task?.title + ''\" for=\"title-{{ task?.id }}\" class=\"title\">\r\n        <input type=\"text\" [value]=\"task?.title\" readonly=\"true\" id=\"title-{{ task?.id }}\" name=\"title-{{ task?.id }}\"\r\n            placeholder=\"Input title\" />\r\n    </label>\r\n    @if(task?.state !== 'TASK_ARCHIVED'){\r\n    <button class=\"pin-button\" [attr.aria-label]=\"'pinTask-' + task?.id\" (click)=\"onPin(task?.id)\">\r\n        <span class=\"icon-star\"></span>\r\n    </button>\r\n    }\r\n</div>"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-78332a457a657a97e2919830d6c28c01b3fd6a89e0ed99b65a0618f5e98d683ce78af2b56077cf568e74cf477fe190dfb0b948c090d94d2d743b2b0d0e3528e9",
            "file": "src/app/demo/task-list/task-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "task-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "task-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nChecks if it's in loading state",
                    "description": "<p>Checks if it&#39;s in loading state</p>\n",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nThe list of tasks",
                    "description": "<p>The list of tasks</p>\n",
                    "line": 13,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent to change the task to archived",
                    "description": "<p>Event to change the task to archived</p>\n",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEvent to change the task to pinned",
                    "description": "<p>Event to change the task to pinned</p>\n",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TaskBoxComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Task, TaskBoxComponent } from '../task-box/task-box.component';\r\n\r\n@Component({\r\n    selector: 'task-list',\r\n    standalone: true,\r\n    templateUrl: 'task-list.component.html',\r\n    imports:[TaskBoxComponent]\r\n})\r\n\r\nexport class TaskListComponent {\r\n    /** The list of tasks */\r\n    @Input() tasks: Task[] = [];\r\n\r\n    /** Checks if it's in loading state */\r\n    @Input() loading = false;\r\n\r\n    /** Event to change the task to pinned */\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output()\r\n    onPinTask = new EventEmitter<Event>();\r\n\r\n    /** Event to change the task to archived */\r\n    // tslint:disable-next-line: no-output-on-prefix\r\n    @Output()\r\n    onArchiveTask = new EventEmitter<Event>();\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"list-items\">\r\n    @if(loading){\r\n    <div>loading</div>\r\n\r\n    }@if(!loading && tasks.length === 0){\r\n    <div>empty</div>\r\n    }\r\n    @else {\r\n        @for (task of tasks; track $index) {\r\n        <task-box [task]=\"task\" (onArchiveTask)=\"onArchiveTask.emit($event)\" (onPinTask)=\"onPinTask.emit($event)\">\r\n        </task-box>\r\n        }\r\n    }\r\n\r\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideExperimentalZonelessChangeDetection(),\r\n  ]\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "EButtonSize",
                "childs": [
                    {
                        "name": "SMALL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sm"
                    },
                    {
                        "name": "MEDIUM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "md"
                    },
                    {
                        "name": "LARGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/enum-button.ts"
            },
            {
                "name": "EButtonState",
                "childs": [
                    {
                        "name": "NONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "none"
                    },
                    {
                        "name": "HOVER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hover"
                    },
                    {
                        "name": "ACTIVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "active"
                    },
                    {
                        "name": "DISABLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "disabled"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/enum-button.ts"
            },
            {
                "name": "EButtonType",
                "childs": [
                    {
                        "name": "PRIMARY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "SECONDARY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "secondary"
                    },
                    {
                        "name": "SUCCESS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "DANGER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "danger"
                    },
                    {
                        "name": "WARNING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "TRANSPARENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "transparent"
                    },
                    {
                        "name": "DEFAULT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "LINK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "link"
                    },
                    {
                        "name": "OUTLINE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "outline"
                    },
                    {
                        "name": "PRIMARY_OUTLINE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary-outline"
                    },
                    {
                        "name": "DISABLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "disable"
                    },
                    {
                        "name": "INFO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "LIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light"
                    },
                    {
                        "name": "DARK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dark"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/enum-button.ts"
            },
            {
                "name": "EnumFormBaseControlType",
                "childs": [
                    {
                        "name": "TEXTBOX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TEXTBOX"
                    },
                    {
                        "name": "TEXTAREA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TEXTAREA"
                    },
                    {
                        "name": "DROPDOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DROPDOWN"
                    },
                    {
                        "name": "DATEPICKER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DATEPICKER"
                    },
                    {
                        "name": "CHECKBOX",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CHECKBOX"
                    },
                    {
                        "name": "ATTACHMENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ATTACHMENT"
                    },
                    {
                        "name": "RADIOGROUP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RADIOGROUP"
                    },
                    {
                        "name": "MONTH_SELECTOR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MONTH_SELECTOR"
                    },
                    {
                        "name": "CURRENCY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CURRENCY"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/enum-interfaces.ts"
            },
            {
                "name": "IFnNameValidator",
                "childs": [
                    {
                        "name": "required",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "required"
                    },
                    {
                        "name": "email",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "email"
                    },
                    {
                        "name": "minLength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minLength"
                    },
                    {
                        "name": "maxLength",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "maxLength"
                    },
                    {
                        "name": "pattern",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pattern"
                    },
                    {
                        "name": "min",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "min"
                    },
                    {
                        "name": "max",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "max"
                    },
                    {
                        "name": "nullValidator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "nullValidator"
                    },
                    {
                        "name": "unique",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "unique"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enum/enum-interfaces.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideExperimentalZonelessChangeDetection(),\r\n  ]\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/enum/enum-button.ts": [
                {
                    "name": "EButtonSize",
                    "childs": [
                        {
                            "name": "SMALL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sm"
                        },
                        {
                            "name": "MEDIUM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "md"
                        },
                        {
                            "name": "LARGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/enum-button.ts"
                },
                {
                    "name": "EButtonState",
                    "childs": [
                        {
                            "name": "NONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "none"
                        },
                        {
                            "name": "HOVER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hover"
                        },
                        {
                            "name": "ACTIVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "active"
                        },
                        {
                            "name": "DISABLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "disabled"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/enum-button.ts"
                },
                {
                    "name": "EButtonType",
                    "childs": [
                        {
                            "name": "PRIMARY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "SECONDARY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "secondary"
                        },
                        {
                            "name": "SUCCESS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "DANGER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "danger"
                        },
                        {
                            "name": "WARNING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "TRANSPARENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "transparent"
                        },
                        {
                            "name": "DEFAULT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "LINK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "link"
                        },
                        {
                            "name": "OUTLINE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "outline"
                        },
                        {
                            "name": "PRIMARY_OUTLINE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary-outline"
                        },
                        {
                            "name": "DISABLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "disable"
                        },
                        {
                            "name": "INFO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "LIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light"
                        },
                        {
                            "name": "DARK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dark"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/enum-button.ts"
                }
            ],
            "src/app/enum/enum-interfaces.ts": [
                {
                    "name": "EnumFormBaseControlType",
                    "childs": [
                        {
                            "name": "TEXTBOX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TEXTBOX"
                        },
                        {
                            "name": "TEXTAREA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TEXTAREA"
                        },
                        {
                            "name": "DROPDOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DROPDOWN"
                        },
                        {
                            "name": "DATEPICKER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DATEPICKER"
                        },
                        {
                            "name": "CHECKBOX",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CHECKBOX"
                        },
                        {
                            "name": "ATTACHMENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ATTACHMENT"
                        },
                        {
                            "name": "RADIOGROUP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RADIOGROUP"
                        },
                        {
                            "name": "MONTH_SELECTOR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MONTH_SELECTOR"
                        },
                        {
                            "name": "CURRENCY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CURRENCY"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/enum-interfaces.ts"
                },
                {
                    "name": "IFnNameValidator",
                    "childs": [
                        {
                            "name": "required",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "required"
                        },
                        {
                            "name": "email",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "email"
                        },
                        {
                            "name": "minLength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minLength"
                        },
                        {
                            "name": "maxLength",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "maxLength"
                        },
                        {
                            "name": "pattern",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pattern"
                        },
                        {
                            "name": "min",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "min"
                        },
                        {
                            "name": "max",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "max"
                        },
                        {
                            "name": "nullValidator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "nullValidator"
                        },
                        {
                            "name": "unique",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "unique"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enum/enum-interfaces.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/button-style/button-style.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonStyleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/control-demo/control-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ControlDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/core-button-demo/core-button-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreButtonDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/signal-demo/signal-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/task-box/task-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskBoxComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/task-box/task-box.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/demo/task-list/task-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/enum/enum-interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICoreFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/enum/enum-interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/enum/enum-interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormBaseControl",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/enum/enum-interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormBaseDropdownOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/enum/enum-interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IValidator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/app-layout/app-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/base-component/base-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-button/core-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-check-box/core-check-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreCheckBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-control/core-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-control/core-control.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreControlService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-form-control-base/core-form-control-base.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreFormControlBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-form/core-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-form/custom-validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomValidators",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/libraries/core-text-box/core-text-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreTextBoxComponent",
                "coveragePercent": 8,
                "coverageCount": "2/23",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}